# This file defines preprocessing steps as well as their keyword arguments.
# By externalizing the order, we can use reproducable code and allow individuals to comprehend/change the preprocessing steps quickly.
# This file can be called in the main.py file. Alternatively, the main body of the script can query the user for steps, then generate a similar file to this one with user specified filename.

frequency_downsample:
    step_nums:
        - 1
    input_hz:
        - None
    output_hz:
        - 256

# Butterworth Filter
# scipy butterworth filter. More information can be found at: https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html
# Available keywords:
## step_nums: integer. Array defining which steps in the preprocessing pipeline this should be run.
## order: List of integers. The order of the filter. default=3
## freqs: List of integer arrays. The frequencies to perform the filter on in each step. 
## filter_type: List of strings. Type of filter. default='bandpass'
### Options: {‘lowpass’, ‘highpass’, ‘bandpass’, ‘bandstop’}

butterworth_filter:
    step_nums:
        - 2
        - 3
        - 4
        - 5
    filter_type:
        - 'bandstop'
        - 'bandstop'
        - highpass
        - lowpass
    freq_filter_array: 
        - "[59,61]"
        - "[119,121]"
        - 1
        - 100
    butterorder:
        - 4
        - 4
        - 4
        - 4

# Eye Blink Removal
# Use the mne built-in ICA tool to remove eye blinks from the data
# Available Keywords
## config_path : string. Path to channel configuration data
## n_components : int. Number of ICA components. (default=10)
eyeblink_removal:
    step_nums:
        - 7
    config_path:
        - /Users/bjprager/Documents/GitHub/SCALP_CONCAT-EEG/scripts/SCALP_CONCAT-EEG/configs/channel_types/scalp/hup_chop_chan_types.yaml

# Data snapshots
# Save data at a given point in the preprocessing pipeline so granular examination of the data is possible
# Available Keywords
## outpath: string. Default='{output_directory}/preprocessing_snapshot/{datatype}/{step_num}/{base_filename}.edf'

data_snapshot_pickle:
    step_nums:
        - 6
        - 8
        - 10

# Z Score Rejection
# Simple z-score rejection function. Either masks or interpolates over values that are outliers from the mean.
# Based on Chebychev Theorem.
# Available keywords:
## step_nums: integer. Array defining which steps in the preprocessing pipeline this should be run.
## window_size: List of integers. Number of data points before/after data point to draw from for distribution.
## z_threshold: List of floats. Number of standard deviations away from mean to create cut-off.
## method: List of strings. Options for how to handle outliers.
### Options: {‘mask’,'interp'}

z_score_rejection:
    step_nums:
        - 9
    window_size:
        - 64
    z_threshold:
        - 5
    method:
        - "interp"